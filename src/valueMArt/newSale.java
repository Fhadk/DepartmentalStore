/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * newSale.java
 *
 * Created on Jan 8, 2012, 4:15:34 AM
 */
package valueMArt;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Fhad khan
 */
public class newSale extends javax.swing.JFrame {

    /** Creates new form newSale */
    public newSale() {
        String url = "jdbc:mysql://localhost:3306/valuemart";
        String user = "root";
        String password = "";
       

        try {
            connection = DriverManager.getConnection(url, user, password);
            statement = connection.createStatement();
            
        } catch (Exception ex) {
            System.err.println(ex.getMessage());
        }

        model=new javax.swing.table.DefaultTableModel(
                    new Object[][]{},new String[]{
                "Catalog ID","Product Name","Quantity","Product Size","Retail Price","sub Total"

            }){
                Class [] type=new Class[]{
                    java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class
                };
                boolean[] canEdit =new boolean []{
                    false,false,false,false,false,false
                };
                
                public Class getColmnClass(int columnIndex){
                    return type[columnIndex];

                }
            @Override
                public boolean isCellEditable(int rowindex,int columnIndex){
                    return canEdit[columnIndex];
                }
            };

        initComponents();
        tb_sale=new JTable(model);
       try{ 
        resultset=statement.executeQuery("Select CID from stock ");
            while (resultset.next()) {
                String cname=resultset.getString(1);
              cb_catalogID.addItem(cname);
               
            }
       }catch(Exception ex){
           System.out.println(ex.getMessage());
           
       }
       check=true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        InvoiceID = new javax.swing.JTextField();
        cb_catalogID = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        itemQty = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        NetTotal = new javax.swing.JTextField();
        cashPaid = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Remaining = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_sale = new javax.swing.JTable();
        Qty = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("New Sale");
        setResizable(false);

        jLabel1.setText("InVoice ID");

        cb_catalogID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_catalogIDActionPerformed(evt);
            }
        });

        jLabel3.setText("Catalog ID");

        jLabel4.setText("Item Qty");

        itemQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemQtyKeyPressed(evt);
            }
        });

        jLabel5.setText("Net Total");

        NetTotal.setEnabled(false);

        cashPaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashPaidActionPerformed(evt);
            }
        });
        cashPaid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashPaidKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cashPaidKeyReleased(evt);
            }
        });

        jLabel6.setText("Cash Paid");

        jLabel7.setText("Remaining");

        Remaining.setEnabled(false);

        jLabel9.setFont(new java.awt.Font("Forte", 1, 14));
        jLabel9.setText("Add Sale");

        jButton1.setText("Finish Sale");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Add To Cart");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tb_sale.setModel(model);
        jScrollPane1.setViewportView(tb_sale);

        Qty.setEnabled(false);

        jLabel8.setText("Total Qty");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(294, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(271, 271, 271))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                .addGap(29, 29, 29)
                .addComponent(Qty, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(306, 306, 306))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(28, 28, 28)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cb_catalogID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(itemQty)
                        .addComponent(InvoiceID, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                    .addGap(52, 52, 52)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(39, 39, 39)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(NetTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                        .addComponent(cashPaid)
                        .addComponent(Remaining))
                    .addContainerGap(117, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(28, 28, 28)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(31, 31, 31))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(98, 98, 98)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(InvoiceID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(NetTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cashPaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel6)
                        .addComponent(cb_catalogID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(itemQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Remaining, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel7))
                    .addContainerGap(334, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    int rows=model.getRowCount();
    String CID=cb_catalogID.getSelectedItem().toString();
    String qty=itemQty.getText();
    String InvoiceId=InvoiceID.getText();
    String Prize=null;
    String CatalogID=null;
    String ProductName=null;
    String ProductSize=null;
    String cash=cashPaid.getText();
    String total=NetTotal.getText();
    int i=0,result=0;
    while(i<rows){
        int Qty=Integer.parseInt(model.getValueAt(i,2).toString());
        String Cid=model.getValueAt(i,0).toString();
        try{
            resultset=statement.executeQuery("Select StockQty from stock where CID='"+Cid+"' ");
            while(resultset.next()){
                int Qty2=Integer.parseInt(resultset.getString(1)); 
                result=Qty2-Qty;
                if(result<=0){
                    result=0;
                }
            }
            statement.executeUpdate("UPDATE stock set StockQty='"+result+"' where CID='"+Cid+"' ");
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
        i++;
    }
    String qry="Select CatalogID,ProductName,ProductSize from product where CatalogID='"+ CID+"' ";
    try {
                resultset = statement.executeQuery(qry);
                while(resultset.next()){
                         CatalogID=resultset.getString(1);
                         ProductName=resultset.getString(2);
                         ProductSize=resultset.getString(3);
                 }
                statement.executeUpdate("INSERT INTO sale(InvoiceID,CatalogID,ProductName,ProductSize,totalPrice,cashPaid) VALUES('"+InvoiceId+"','"+CID+"','"+ProductName+"','"+ProductSize+"','"+total+"','"+cash+"')");
               
    }catch(Exception e){
        System.out.println(e.getMessage());        
    }
    
    
    
    
    
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    String CID=cb_catalogID.getSelectedItem().toString();
    String qty=itemQty.getText();
    String InvoiceId=InvoiceID.getText();
    String Prize=null;
    String CatalogID=null;
    String ProductName=null;
    String ProductSize=null;
    String Ntotal=NetTotal.getText();
    String qry="Select CatalogID,ProductName,ProductSize from product where CatalogID='"+ CID+"' ";
    String subtotal="0";
    
    
            try {
                resultset = statement.executeQuery(qry);
                while(resultset.next()){
                         CatalogID=resultset.getString(1);
                         ProductName=resultset.getString(2);
                         ProductSize=resultset.getString(3);
                        resultset=statement.executeQuery("Select Price from stock where CID='"+ CID+"' ");
                        while(resultset.next()){
                             Prize=resultset.getString(1);
                        }
                        String total=Integer.toString(Integer.parseInt(qty) *Integer.parseInt(Prize)) ;
                        model.addRow(new Object[]{CatalogID,ProductName,qty,ProductSize,Prize ,total });
                        int Totalrows=model.getRowCount();
                        if(Totalrows==1){
                            NetTotal.setText(model.getValueAt(0,5).toString());                            
                        }else if(Totalrows!=1){                            
                            Totalrows=Totalrows-1;
                            int value=Integer.parseInt(NetTotal.getText())+Integer.parseInt(model.getValueAt(Totalrows,5).toString());
                            NetTotal.setText(Integer.toString(value));
                        }
                }
                
            } catch (Exception ex) {
               System.out.println(ex.getMessage());
            }
}//GEN-LAST:event_jButton2ActionPerformed

private void cashPaidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashPaidKeyReleased

    
}//GEN-LAST:event_cashPaidKeyReleased

private void cashPaidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashPaidKeyPressed
try{
    Remaining.setText(Integer.toString(Integer.parseInt(cashPaid.getText())-Integer.parseInt(NetTotal.getText())));
}catch(Exception e){
    System.out.println(e.getMessage());
}
}//GEN-LAST:event_cashPaidKeyPressed

private void cashPaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashPaidActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_cashPaidActionPerformed

private void cb_catalogIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_catalogIDActionPerformed
    String CID=cb_catalogID.getSelectedItem().toString();
    String qty=null;
    if(check==true){
        try{
            resultset=statement.executeQuery("Select StockQty from stock where CID='"+CID+"' ");
            while(resultset.next()){
                 qty=resultset.getString(1);
            }
            Qty.setText(qty);
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }
}//GEN-LAST:event_cb_catalogIDActionPerformed

private void itemQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemQtyKeyPressed
    String CID=cb_catalogID.getSelectedItem().toString();
    String qty=null;
    try{
            resultset=statement.executeQuery("Select StockQty from stock where CID='"+CID+"' ");
            while(resultset.next()){
                 qty=resultset.getString(1);
            }
        
        if(Integer.parseInt(itemQty.getText()) > Integer.parseInt(qty)){
            JOptionPane.showMessageDialog(this,"quantity can't be more than in the Stock");
        }else{        
        }
    }catch(Exception e){
            System.out.println(e.getMessage());
        }
}//GEN-LAST:event_itemQtyKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(newSale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(newSale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(newSale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(newSale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new newSale().setVisible(true);
            }
        });
    }
    private static int temp=0;
    private static int count=0;
    private DefaultTableModel model;
    private Connection connection;
    private Statement statement;
    private ResultSet resultset;
    private boolean check=false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField InvoiceID;
    private javax.swing.JTextField NetTotal;
    private javax.swing.JTextField Qty;
    private javax.swing.JTextField Remaining;
    private javax.swing.JTextField cashPaid;
    private javax.swing.JComboBox cb_catalogID;
    private javax.swing.JTextField itemQty;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tb_sale;
    // End of variables declaration//GEN-END:variables

    
}
