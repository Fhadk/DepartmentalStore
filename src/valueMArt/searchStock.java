/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * searchStock.java
 *
 * Created on Jan 5, 2012, 8:46:14 PM
 */

package valueMart;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FhAD khAn
 */
public class searchStock extends javax.swing.JFrame {

    /** Creates new form searchStock */
    public searchStock() {
        String url = "jdbc:mysql://localhost:3306/valuemart";
        String user = "root";
        String password = "";

        try {
            connection = DriverManager.getConnection(url, user, password);
            statement = connection.createStatement();


        } catch (Exception ex) {
            System.err.println(ex.getMessage());
        }

        model=new javax.swing.table.DefaultTableModel(
                    new Object[][]{},new String[]{
                "Product ID","Catagery ID","Stock Qty","Date","Time","Price"

            }){
                Class [] type=new Class[]{
                    java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class
                };
                boolean[] canEdit =new boolean []{
                    false,false,false,false,false,false
                };
                
                public Class getColmnClass(int columnIndex){
                    return type[columnIndex];

                }
            @Override
                public boolean isCellEditable(int rowindex,int columnIndex){
                    return canEdit[columnIndex];
                }
            };

        initComponents();
        tb_stock=new JTable(model);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stockField = new javax.swing.JTextField();
        ManageOrder3 = new javax.swing.JLabel();
        ManageOrder19 = new javax.swing.JLabel();
        PlaceOrder1 = new javax.swing.JButton();
        PlaceOrder2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_stock = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Search Stock");
        setResizable(false);

        stockField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockFieldActionPerformed(evt);
            }
        });

        ManageOrder3.setFont(new java.awt.Font("Forte", 1, 12));
        ManageOrder3.setText("Product Id");

        ManageOrder19.setFont(new java.awt.Font("Forte", 1, 14));
        ManageOrder19.setText("Search Stock");

        PlaceOrder1.setFont(new java.awt.Font("Forte", 1, 12));
        PlaceOrder1.setText("Look Up");
        PlaceOrder1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlaceOrder1ActionPerformed(evt);
            }
        });

        PlaceOrder2.setFont(new java.awt.Font("Forte", 1, 12)); // NOI18N
        PlaceOrder2.setText("Exit");
        PlaceOrder2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlaceOrder2ActionPerformed(evt);
            }
        });

        tb_stock.setModel(model);
        jScrollPane1.setViewportView(tb_stock);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(ManageOrder3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(stockField, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PlaceOrder1)
                .addGap(154, 154, 154))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(288, 288, 288)
                .addComponent(ManageOrder19)
                .addContainerGap(307, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(305, 305, 305)
                .addComponent(PlaceOrder2)
                .addContainerGap(318, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(ManageOrder19)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(stockField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ManageOrder3))
                    .addComponent(PlaceOrder1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(PlaceOrder2)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stockFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_stockFieldActionPerformed

    private void PlaceOrder1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlaceOrder1ActionPerformed
        String PID=stockField.getText();
         if(count==0){   
            String qry=("Select * FROM stock where PID='"+PID+"'");
                try {
                    resultset = statement.executeQuery(qry);
                    while(resultset.next()){
                        String ProductID=resultset.getString(1);
                        String CatalogID=resultset.getString(2);
                        String StockQty=resultset.getString(3);
                        String Date=resultset.getString(4);
                        String Time=resultset.getString(5);
                        String Price=resultset.getString(6);
                        model.addRow(new Object[]{ProductID,CatalogID,StockQty,Date,Time,Price});
                        count++;
                    }

                } catch (Exception ex) {
                   ex.getMessage();

                }

         }else if(count!=0){
              int row=model.getRowCount()-1;
              String pid=(model.getValueAt(row,0)).toString();
             if(pid.equals(PID)){
                JOptionPane.showMessageDialog(this,"Record AllReady printed");
             }else{
                 String qry=("Select * FROM stock where PID='"+PID+"'");
                try {
                    resultset = statement.executeQuery(qry);
                    while(resultset.next()){
                        String ProductID=resultset.getString(1);
                        String CatalogID=resultset.getString(2);
                        String StockQty=resultset.getString(3);
                        String Date=resultset.getString(4);
                        String Time=resultset.getString(5);
                        String Price=resultset.getString(6);
                        model.addRow(new Object[]{ProductID,CatalogID,StockQty,Date,Time,Price});
                    }

                } catch (Exception ex) {
                   ex.getMessage();
                }                 
             }
         }
}//GEN-LAST:event_PlaceOrder1ActionPerformed

    private void PlaceOrder2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlaceOrder2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_PlaceOrder2ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new searchStock().setVisible(true);
            }
        });
    }
    private static int count=0;
    private DefaultTableModel model;
    private Connection connection;
    private Statement statement;
    private ResultSet resultset;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ManageOrder19;
    private javax.swing.JLabel ManageOrder3;
    private javax.swing.JButton PlaceOrder1;
    private javax.swing.JButton PlaceOrder2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField stockField;
    private javax.swing.JTable tb_stock;
    // End of variables declaration//GEN-END:variables

}
